var RevealNotes = (function() {
  var e = null
  function t(t) {
    if (!e || e.closed) {
      if (!t) {
        var a = document.querySelector('script[src$="notes.min.js"]').src
        t = (a = a.replace(/notes\.min\.js(\?.*)?$/, "")) + "notes.html"
      }
      var n
      if ((e = window.open(t, "reveal.js - Notes", "width=1100,height=700")))
        (n = setInterval(function() {
          e.postMessage(
            JSON.stringify({
              namespace: "reveal-notes",
              type: "connect",
              url:
                window.location.protocol +
                "//" +
                window.location.host +
                window.location.pathname +
                window.location.search,
              state: Reveal.getState()
            }),
            "*"
          )
        }, 500)),
          window.addEventListener("message", function(t) {
            var a,
              r,
              o,
              i,
              l = JSON.parse(t.data)
            l &&
              "reveal-notes" === l.namespace &&
              "connected" === l.type &&
              (clearInterval(n),
              Reveal.addEventListener("slidechanged", s),
              Reveal.addEventListener("fragmentshown", s),
              Reveal.addEventListener("fragmenthidden", s),
              Reveal.addEventListener("overviewhidden", s),
              Reveal.addEventListener("overviewshown", s),
              Reveal.addEventListener("paused", s),
              Reveal.addEventListener("resumed", s),
              s()),
              l &&
                "reveal-notes" === l.namespace &&
                "call" === l.type &&
                ((a = l.methodName),
                (r = l.arguments),
                (o = l.callId),
                (i = Reveal[a].apply(Reveal, r)),
                e.postMessage(
                  JSON.stringify({
                    namespace: "reveal-notes",
                    type: "return",
                    result: i,
                    callId: o
                  }),
                  "*"
                ))
          })
      else
        alert(
          "Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view."
        )
    } else e.focus()
    function s(t) {
      var a = Reveal.getCurrentSlide(),
        n = a.querySelector("aside.notes"),
        s = a.querySelector(".current-fragment"),
        r = {
          namespace: "reveal-notes",
          type: "state",
          notes: "",
          markdown: !1,
          whitespace: "normal",
          state: Reveal.getState()
        }
      if (
        (a.hasAttribute("data-notes") &&
          ((r.notes = a.getAttribute("data-notes")),
          (r.whitespace = "pre-wrap")),
        s)
      ) {
        var o = s.querySelector("aside.notes")
        o
          ? (n = o)
          : s.hasAttribute("data-notes") &&
            ((r.notes = s.getAttribute("data-notes")),
            (r.whitespace = "pre-wrap"),
            (n = null))
      }
      n &&
        ((r.notes = n.innerHTML),
        (r.markdown = "string" == typeof n.getAttribute("data-markdown"))),
        e.postMessage(JSON.stringify(r), "*")
    }
  }
  return {
    init: function() {
      ;/receiver/i.test(window.location.search) ||
        (null !== window.location.search.match(/(\?|\&)notes/gi) && t(),
        Reveal.addKeyBinding(
          { keyCode: 83, key: "S", description: "Speaker notes view" },
          function() {
            t()
          }
        ))
    },
    open: t
  }
})()
Reveal.registerPlugin("notes", RevealNotes)
//# sourceMappingURL=/sm/c61518c1e91d46d0b989f8b95a2329908cd6e05986d886f5d8171814fcafe4c0.map
